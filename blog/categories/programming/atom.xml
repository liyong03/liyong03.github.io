<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Yong的Blog]]></title>
  <link href="http://liyong03.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://liyong03.github.io/"/>
  <updated>2014-02-17T23:43:30+08:00</updated>
  <id>http://liyong03.github.io/</id>
  <author>
    <name><![CDATA[Yong Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 的 ReactiveCocoa 函数式响应编程]]></title>
    <link href="http://liyong03.github.io/blog/2014/02/17/ios-frp/"/>
    <updated>2014-02-17T23:33:11+08:00</updated>
    <id>http://liyong03.github.io/blog/2014/02/17/ios-frp</id>
    <content type="html"><![CDATA[<p>本文翻译自<a href="http://www.teehanlax.com/blog/reactivecocoa/">这里</a>，其中一些语法由于 ReactiveCocoa 的演进我做了修改。</p>

<p>Objective-C 是一种基于C语言、但又常常深陷于C的过时编程方式的编程语言。随着计算机计算能力的提升，编程语言设计也与时俱进，但是Objective-C有时好像留在了过去。</p>

<p>Objective-C和C都属于计算机顺序执行软件指令的<a href="http://en.wikipedia.org/wiki/Imperative_programming">指令式编程语言</a>，软件的行为也出自执行这些指令。如果开发者写出来正确顺序的指令，那么软件的行为也满足程序的期望。</p>

<p>但是写出来的代码总是有缺陷，我们需要使用或是手动或是自动的测试去减少这些问题，但是如果能抽象单独的指令，而把注意力放在期望行为上面。这就是<a href="http://en.wikipedia.org/wiki/Declarative_programming">声明式编程</a>的由来。</p>

<p>指令范式强制让开发者写程序去完成一些任务，而声明范式解放开发者去描述任务是什么。</p>

<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>是一种让 Objective-C 少一些指令式属性，多一些响应式属性。它将<em>怎样</em>抽象成<em>什么</em>。</p>

<p>下面我们用几个例子来展示 Objective-C 中的声明式编程是什么样的。</p>

<p>ReactiveCocoa 的核心是<em>信号 (signal)</em> ，信号代表了不同时间发生的事件流。<em>订阅 (subscribing)</em> 信号允许开发者访问这些事件。下面开看一个基础的例子。</p>

<p>iOS App 中得输入框(Text Field)在输入文字发生改变时会产生的事件会生成信号。ReactiveCocoa 的 UITextField 分类(Category)有一个方法：<em>rac_textSignal</em>，我们可以这样订阅这个事件：</p>

<p>``` objc</p>

<pre><code>[self.usernameField.rac_textSignal subscribeNext:^(NSString *value) {
    NSLog(@"Text field has been updated: %@", value);
}];
</code></pre>

<p>```</p>

<p>这段代码中，我们声明输入框的文字变化时，将它的新值打印出来。无论何时输入框的信号发送了一个事件，这块代码都将被以新的文本内容为参数调用。</p>

<p><img src="/images/frp_subscription.png" alt="subscription" /></p>

<p>信号很牛逼的地方在于它可以组合使用。我们可以过滤 <em>rac_textSignal</em> 返回的信号，以保证字符串的长度大于3才能登陆：</p>

<p>``` objc</p>

<pre><code>[[self.textField.rac_textSignal filter:^BOOL(NSString *value) {
    return [value length] &gt;= 3;
}] subscribeNext:^(NSString *value) {
    NSLog(@"Text field has been updated: %@", value);
}];
</code></pre>

<p>```</p>

<p>Filter 方法返回一个新的信号。当第一个信号发射了一个事件，这个事件的值将被传递到 <em>filter</em> 代码块。如果这块代发返回 YES，那么新的信号会发射一个事件。后代码订阅的就是这个 filter 返回的信号。</p>

<p><img src="/images/frp_filter.png" alt="filter" /></p>

<p>我们来做一些更复杂的吧。我们将两个输入框的两个信号<em>联合 (combine)</em> 起来，将他们的值<em>降 (reduce)</em> 为一个布尔值，然后和另一个按钮的 <em>enable</em> 属性<em>绑定 (bind)</em> 在一起。</p>

<p>``` objc</p>

<pre><code>[[RACSignal combineLatest:@[self.firstNameField.rac_textSignal, self.lastNameField.rac_textSignal]
    reduce:^(NSString *firstName, NSString *lastName){
        return @(firstName.length &gt; 0 &amp;&amp; lastName.length &gt; 0);
    }] setKeyPath:@"enabled" onObject:self.button];
</code></pre>

<p>```</p>

<p>按钮的 enable 状态总是由两个输入框的最新的信号所派生。这代表了函数响应式编程众多核心理念中的一个：派生状态(deriving state)。</p>

<p><img src="/images/frp_combine.png" alt="combine" /></p>

<p>在上述所有例子中，我们都在 <strong>viewDidLoad</strong> 中有所声明，在应用运行时这些陈述都保持为真。这里我们没有实现任何代理方法(delegate methods)或者保存任何状态。所有行为都是显式声明而不是隐式的推断。</p>

<p>函数响应式编程非常复杂，而学习 ReactiveCocoa 的丰富细节也需要时间。但是学习这些也会带来具有可预测的、良好定义行为的稳定程序。</p>

<p>软件开发的历史告诉我们软件开发的趋势是朝着更高级别的抽象迈进，诚如我们现在再也不会和穿孔卡片或者汇编语言打交道一样。我相信函数响应式编程是抽象的另一个更高层次，借此程序员可以更快地开发出更好地软件。</p>
]]></content>
  </entry>
  
</feed>
